// 
// This behavior sets a custom field (sort of a "global" variable) called 'Proposed Resolution'.
// The 'Proposed Resolution' field can then be used to set the default value for the 'Resolution' system field.
// This is useful for a 'Close' transition where you have a transition screen with the 'Resolution' field on it.
// The default value that appears in the dropdown will be what you set in the post-function script below in a 
// previous transition. If not set, it defaults to "Fixed".
// The resolution can be changed by the user in the dropdown, however, if they are not paying attention it can 
// be what it needs to be (e.g. "Canceled", "Fixed", "Declined", etc) using this method.
//
// The code below in comments is used to set the 'Proposed Resolution' to "Canceled" (third line from the bottom).
// Put it in a post function (Script Post-Function [ScriptRunner]) 
//
// import com.atlassian.jira.component.ComponentAccessor
// import com.atlassian.jira.issue.ModifiedValue
// import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
// 
// def customFieldManager = ComponentAccessor.customFieldManager
// def proposedResolution = customFieldManager.getCustomFieldObjectsByName("Proposed Resolution").first()
// 
// def optionsManager = ComponentAccessor.getOptionsManager()
// def config = proposedResolution.getRelevantConfig(issue)
// def options = optionsManager.getOptions(config)
// def optionToSelect = options.find {
//     it.value == "Canceled"
// }
// proposedResolution.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(proposedResolution), optionToSelect), new DefaultIssueChangeHolder())
// 

import com.atlassian.jira.component.ComponentAccessor
import static com.atlassian.jira.issue.IssueFieldConstants.RESOLUTION
import static com.atlassian.jira.issue.IssueFieldConstants.*
import com.onresolve.jira.groovy.user.FieldBehaviours
import groovy.transform.BaseScript

import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.issue.comments.CommentManager;
import com.atlassian.jira.issue.Issue;

@BaseScript FieldBehaviours fieldBehaviours

def constantsManager = ComponentAccessor.constantsManager

def customFieldManager = ComponentAccessor.getCustomFieldManager()
def cField = customFieldManager.getCustomFieldObjectByName("Proposed Resolution")
def String cFieldValue = underlyingIssue.getCustomFieldValue(cField)

def defaultValue = constantsManager.resolutions.find { it.name == cFieldValue }

getFieldById(RESOLUTION).setFormValue(defaultValue.id)


//Afterwards, you will need to add this script to the post function steps in desired workflows.

import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

def customFieldManager = ComponentAccessor.customFieldManager
def proposedResolution = customFieldManager.getCustomFieldObjectsByName("Proposed Resolution").first()

def optionsManager = ComponentAccessor.getOptionsManager()
def config = proposedResolution.getRelevantConfig(issue)
def options = optionsManager.getOptions(config)
def optionToSelect = options.find {
    it.value == "Done"
}
proposedResolution.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(proposedResolution), optionToSelect), new DefaultIssueChangeHolder())
